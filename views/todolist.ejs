<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {
            margin: 0;
            min-width: 250px;
        }

        /* Include the padding and border in an element's total width and height */
        * {
            box-sizing: border-box;
        }

        /* Remove margins and padding from the list */
        ul {
            margin: 0;
            padding: 0;
        }

        /* Style the list items */
        ul li {
            cursor: pointer;
            position: relative;
            /*padding: 12px 8px 12px 40px;*/
            list-style-type: none;
            background: #eee;
            font-size: 18px;
            transition: 0.2s;

            /* make the list items unselectable */
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        /* Set all odd list items to a different color (zebra-stripes) */
        ul li:nth-child(odd) {
            background: #f9f9f9;
        }

        /* Darker background-color on hover */
        ul li:hover {
            background: #ddd;
        }

        /* When clicked on, add a background color and strike out text */
        ul li.checked {
            background: #888;
            color: #fff;
        }

        /* Style the button that is used to open and close the collapsible content */
        .collapsible {
            cursor: pointer;
            padding: 18px;
            width: 100%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
        }

        /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
        .active, .collapsible:hover {
            background-color: #888;
        }


        /* Style the collapsible content. Note: hidden by default */
        .content {
            /*padding: 0 18px;*/
            display: none;
            overflow: hidden;
            background-color: #f1f1f1;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: space-around;
            align-items: center;
            align-content: space-around;
        }

        /* Style the close button */
        .save {
            position: absolute;
            right: 80px;
            top: 0;
            padding: 12px 16px 12px 16px;
        }

        /* Style the close button */
        .edit {
            position: absolute;
            right: 40px;
            top: 0;
            padding: 12px 16px 12px 16px;
        }

        .close {
            position: absolute;
            right: 0;
            top: 0;
            padding: 12px 16px 12px 16px;
        }

        .save:hover, .edit:hover, .close:hover {
            background-color: #f44336;
            color: white;
        }

        /* Style the header */
        .header {
            background-color: #f44336;
            padding: 30px 40px;
            color: white;
            text-align: center;
        }

        /* Clear floats after the header */
        .header:after {
            content: "";
            display: table;
            clear: both;
        }

        /* Style the input */
        input {
            margin: 0;
            border: none;
            border-radius: 0;
            width: 75%;
            padding: 10px;
            float: left;
            font-size: 16px;
        }

        /* Style the "Add" button */
        .addBtn {
            padding: 10px;
            width: 25%;
            background: #d9d9d9;
            color: #555;
            float: left;
            text-align: center;
            font-size: 16px;
            cursor: pointer;
            transition: 0.3s;
            border-radius: 0;
        }

        .addBtn:hover {
            background-color: #bbb;
        }

        #add {
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
            justify-content: space-around;
        }

        #ADDstatut {
            border: none;
            margin: 5px;
        }

        #myDIV {
            display: flex;
            flex-direction: column;
            align-items: center;
            align-content: center;
        }

        input {
            text-align: center;
            margin: 5px;
            width: auto;
        }

        .input {
            display: flex;
            flex-direction: column;
            flex-wrap: nowrap;
            justify-content: space-around;
            align-items: center;
        }

        .input > input {
            width: 75%;
        }

        #statut {
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
            justify-content: space-around;
        }

        .statut {
            display: flex;
            flex-direction: column;
        }
    </style>
</head>
<body>

<div id="myDIV" class="header">
    <h2 style="margin:5px">My To Do List</h2>
    <div id="add">
        <input type="text" name="title" id="ADDtitle" placeholder="Title" autofocus/>
        <input type="text" name="dateBegin" id="ADDdateBegin" placeholder="Date begin"/>
        <input type="text" name="dateEnd" id="ADDdateEnd" placeholder="Date end"/>
        <select id="ADDstatut" placeholder="Statut">
            <option value="Non précisée">Non précisée</option>
            <option value="Tâche requise">Tâche requise</option>
            <option value="En cours">En cours</option>
            <option value="Achevée">Achevée</option>
            <option value="Annulée">Annulée</option>
        </select>
        <input type="text" name="tags" id="ADDtags" placeholder="Tags"/>
    </div>
    <button type="button" onclick="add()" class="addBtn">Add</button>
</div>
<div style="margin: 20px;display: flex;flex-direction: column;">
    <div id="statut">
        <div class="statut">Non précisé: <input type="checkbox" id="non_precise"></div>
        <div class="statut">Tâche requise: <input type="checkbox" id="tache_requise"></div>
        <div class="statut"> En cours : <input type="checkbox" id="en_cours" value=" En cours"></div>
        <div class="statut"> Achevée : <input type="checkbox" id="achevee" value="Achevée"></div>
        <div class="statut">Annulée : <input type="checkbox" id="annulee" value="Annulée"></div>
    </div>
    <input type="text" name="tags" id="searchTags" placeholder="Tags separated by ','" style="background-color: aliceblue;"/>
    <button type="button" onclick="statut()">Search</button>
</div>

<ul id="myUL">

    <% todolist.forEach(function(todo) { %>
        <li id="<%= todo.id %>">
            <button type="button" class="collapsible"><%= todo.title %> </button>
            <div class="content">
                <div class="input"><label for="title">Titre de la tâche</label>
                    <input class="form" type="text" name="title" id="title_<%= todo.id %>" value="<%= todo.title %>"
                           disabled
                           autofocus/>
                </div>
                <div class="input">
                    <label for="dateEnd">Date de début de la tâche</label>
                    <input class="form" type="text" name="dateBegin" id="dateBegin_<%= todo.id %>"
                           value="<%= todo.dateBegin %>"
                           disabled/>
                </div>
                <div class="input">
                    <label for="dateEnd">Date d'échéance de la tâche</label>
                    <input class="form" type="text" name="dateEnd" id="dateEnd_<%= todo.id %>"
                           value="<%= todo.dateEnd %>" disabled/>
                </div>
                <div class="input">
                    <label for="statut">Degré d'avancement</label>
                    <input class="form" type="text" name="statut" id="statut_<%= todo.id %>" value="<%= todo.statut %>"
                           disabled/>
                </div>
                <div class="input">
                    <label for="tags">Liste de catégories</label>
                    <input class="form" type="text" name="tags" id="tags_<%= todo.id %>" value="<%= todo.tags %>"
                           disabled/>
                </div>
            </div>
        </li>
    <% }); %>
</ul>

<script>

    // Create a "close" button and append it to each list item
    var myNodelist = document.getElementsByTagName("LI");
    var i;
    for (i = 0; i < myNodelist.length; i++) {
        var id = myNodelist[i].getAttribute("id")
        var span = document.createElement("SPAN");
        var span2 = document.createElement("SPAN");
        var txt = document.createTextNode("\u00D7");
        var txt2 = document.createTextNode("\u270E");
        span.setAttribute('onclick', "remove('" + id + "')");
        span.className = "close";
        span2.className = "edit";
        span.appendChild(txt);
        span2.appendChild(txt2)
        myNodelist[i].appendChild(span);
        myNodelist[i].appendChild(span2);
    }


    // Click on a edit button to hide the current list item
    var edit = document.getElementsByClassName("edit");
    var i;
    for (i = 0; i < edit.length; i++) {
        edit[i].onclick = function () {
            var div = this.parentElement;
            let input = div.getElementsByClassName("form");
            //let updBtn = div.parentNode;
            for (let i = 0; i < input.length; i++) {
                if (input[i].disabled == true) {
                    input[i].disabled = false;
                } else {
                    input[i].disabled = true;

                }
            }
            if (input[input.length - 1].disabled == false) {

                let span = document.createElement("SPAN");
                var txt = document.createTextNode("\uD83D\uDCBE");
                let id = div.getAttribute("id");
                span.setAttribute('onclick', "update('" + id + "')");
                span.className = "save";
                span.appendChild(txt);
                div.appendChild(span);
            } else {
                div.lastChild.remove();
            }
        }
    }

    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "flex") {
                content.style.display = "none";
            } else {
                content.style.display = "flex";
            }
        });
    }

    // Create a new list item when clicking on the "Add" button
    function newElement() {
        var li = document.createElement("li");
        var inputValue = document.getElementById("myInput").value;
        var t = document.createTextNode(inputValue);
        li.appendChild(t);
        if (inputValue === '') {
            alert("You must write something!");
        } else {
            document.getElementById("myUL").appendChild(li);
        }
        document.getElementById("myInput").value = "";

        var span = document.createElement("SPAN");
        var txt = document.createTextNode("\u00D7");
        span.className = "close";
        span.appendChild(txt);
        li.appendChild(span);
        document.ge

        for (i = 0; i < close.length; i++) {
            close[i].onclick = function () {
                var div = this.parentElement;
                div.style.display = "none";
            }
        }
    }
</script>

<script type="text/javascript">
    function add() {
        let data = JSON.stringify(
            {
                title: document.getElementById("ADDtitle").value,
                dateBegin: document.getElementById("ADDdateBegin").value,
                dateEnd: document.getElementById("ADDdateEnd").value,
                statut: document.getElementById("ADDstatut").value,
                tags: document.getElementById("ADDtags").value

            }
        )
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                console.log("put ok");
                window.location.href = "http://localhost:3000/todo";
            }
        };
        xhttp.open("POST", "http://localhost:3000/api/todo");
        xhttp.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
        xhttp.send(data);
    };

    function update(myid) {
        console.log("update");

        let data = JSON.stringify(
            {
                //id: myid,
                title: document.getElementById("title_" + myid).value,
                dateBegin: document.getElementById("dateBegin_" + myid).value,
                dateEnd: document.getElementById("dateEnd_" + myid).value,
                statut: document.getElementById("statut_" + myid).value,
                tags: document.getElementById("tags_" + myid).value

            }
        )
        console.log(data)
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                console.log("put ok");
                //window.location.href = "http://localhost:3000/todo";
            }
        };
        xhttp.open("PUT", "http://localhost:3000/api/todo/" + myid);
        xhttp.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
        xhttp.send(data);

    };


    function remove(myid) {
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                console.log("delete ok");
                window.location.href = "http://localhost:3000/todo";
            }
        };
        xhttp.open("DELETE", "http://localhost:3000/api/todo/" + myid, true);
        xhttp.send()
    }

    function statut() {
        let xhttp = new XMLHttpRequest();
        let statut = [];
        let params = '';
        if (document.getElementById('non_precise').checked) {
            statut.push('Non precisée');
        }
        if (document.getElementById('tache_requise').checked) {
            statut.push('Tâche requise');
        }
        if (document.getElementById('en_cours').checked) {
            statut.push('En cours');
        }
        if (document.getElementById('achevee').checked) {
            statut.push('Achevée');
        }
        if (document.getElementById('annulee').checked) {
            statut.push('Annulée');
        }

        if (document.getElementById('searchTags').value.length > 0) {

            params += "tags=" + document.getElementById('searchTags').value;
        }

        if (statut.length > 0 ) {
            if (params.length > 0) {
                params += "&";
            }
            params += "statut=" + statut.join(",");
        }
        if(params.length>0){

            window.location.href = "http://localhost:3000/api/todo?" + params;
        } else {
            window.location.href = "http://localhost:3000/api/todo";
        }
    }

</script>


</body>
</html>
